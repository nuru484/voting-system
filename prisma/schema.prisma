// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
}

enum VoteActionType {
  VOTE
  SKIP
}

model User {
  id       Int     @id @default(autoincrement())
  name     String?
  email    String? @unique
  role     Role    @default(ADMIN)
  position String?
  password String?
  phone    String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ElectionStatus {
  UPCOMING
  IN_PROGRESS
  ENDED
  PAUSED
  CANCELLED
}

model Election {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  status      ElectionStatus @default(IN_PROGRESS)
  startDate   DateTime
  endDate     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Portfolio      Portfolio[]
  Candidate      Candidate[]
  Votes          Votes[]
  VoterElections VoterElection[]
  VoteActions    VoteAction[]
}

model Candidate {
  id             Int     @id @default(autoincrement())
  name           String
  profilePicture String?
  party          String?
  partySymbol    String?

  election    Election  @relation(fields: [electionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  electionId  Int
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  portfolioId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Votes       Votes[]
  VoteActions VoteAction[]
}

model Portfolio {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  electionId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Candidate   Candidate[]
  VoteActions VoteAction[]
}

model Votes {
  id          Int       @id @default(autoincrement())
  voter       Voter     @relation(fields: [voterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voterId     Int
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  candidateId Int
  election    Election  @relation(fields: [electionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  electionId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Voter {
  id             Int     @id @default(autoincrement())
  name           String
  profilePicture String?
  voterId        String? @unique
  phoneNumber    String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Votes          Votes[]
  VoterElections VoterElection[]
  VoteActions    VoteAction[]
}

model VoterElection {
  id         Int      @id @default(autoincrement())
  voter      Voter    @relation(fields: [voterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voterId    Int
  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  electionId Int
  hasVoted   Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([voterId, electionId])
}

model VoteAction {
  id          Int            @id @default(autoincrement())
  voter       Voter          @relation(fields: [voterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voterId     Int
  election    Election       @relation(fields: [electionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  electionId  Int
  portfolio   Portfolio?     @relation(fields: [portfolioId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  portfolioId Int?
  candidate   Candidate?     @relation(fields: [candidateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  candidateId Int?
  actionType  VoteActionType @default(VOTE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([voterId, electionId, portfolioId])
}
